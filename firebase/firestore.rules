rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function hasAccess() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hasAccess == true;
    }
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow read: if isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin() || 
                      (request.auth.uid == userId && 
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['lastLogin', 'displayName', 'photoURL']));
    }
    match /bikes/{bikeId} {
      // Anyone can read bikes (public catalog)
      allow read: if true;
      // Only authenticated users with access can create, update, delete
      allow create, update, delete: if hasAccess();
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 